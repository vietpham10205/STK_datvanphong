set autocommit on;
-- Tạo bảng USERS
CREATE TABLE USERS (
    user_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    username VARCHAR2(50) UNIQUE NOT NULL,
    password VARCHAR2(100) NOT NULL, 
    full_name VARCHAR2(100) NOT NULL,
    email VARCHAR2(100) UNIQUE NOT NULL,
    phone_number VARCHAR2(15),
    role VARCHAR2(20) CHECK (role IN ('Quản lý', 'Admin', 'Người cho thuê', 'Người thuê', 'Banned')) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
CREATE TABLE USER_ROLES (
    role_name VARCHAR2(20) PRIMARY KEY,
    description VARCHAR2(200)
);
ALTER TABLE USERS
ADD CONSTRAINT fk_user_role
FOREIGN KEY (role) REFERENCES USER_ROLES(role_name);

-- Tạo bảng ROOM_TYPES
CREATE TABLE ROOM_TYPES (
    room_type_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    type_name VARCHAR2(50) UNIQUE NOT NULL,
    description VARCHAR2(200)
);

-- Tạo bảng LOCATIONS
CREATE TABLE LOCATIONS (
    location_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    location_name VARCHAR2(100) UNIQUE NOT NULL,
    address VARCHAR2(200) NOT NULL
);

-- Tạo bảng ROOMS
CREATE TABLE ROOMS (
    room_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    room_name VARCHAR2(100) NOT NULL,
    room_type_id NUMBER REFERENCES ROOM_TYPES(room_type_id) ON DELETE CASCADE,
    location_id NUMBER REFERENCES LOCATIONS(location_id) ON DELETE CASCADE,
    area NUMBER NOT NULL CHECK (area > 0),
    price_per_day NUMBER NOT NULL CHECK (price_per_day > 0),
    capacity NUMBER NOT NULL CHECK (capacity > 0),
    description VARCHAR2(500)
);

-- Tạo bảng PACKAGES với priority_level
CREATE TABLE PACKAGES (
    package_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    package_name VARCHAR2(100) NOT NULL,
    price NUMBER NOT NULL CHECK (price >= 0),
    duration_days NUMBER NOT NULL CHECK (duration_days > 0),
    priority_level NUMBER DEFAULT 0 CHECK (priority_level >= 0)
);

-- Tạo bảng USER_PACKAGES
CREATE TABLE USER_PACKAGES (
    user_package_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id NUMBER REFERENCES USERS(user_id) ON DELETE CASCADE,
    package_id NUMBER REFERENCES PACKAGES(package_id) ON DELETE CASCADE,
    start_date DATE DEFAULT SYSDATE,
    end_date DATE,
    is_active CHAR(1) DEFAULT 'Y' CHECK (is_active IN ('Y', 'N'))
);

-- Tạo bảng POSTS với priority
CREATE TABLE POSTS (
    post_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id NUMBER REFERENCES USERS(user_id) ON DELETE CASCADE,
    room_id NUMBER REFERENCES ROOMS(room_id) ON DELETE CASCADE,
    package_id NUMBER REFERENCES PACKAGES(package_id) ON DELETE CASCADE,
    title VARCHAR2(150) NOT NULL,
    content VARCHAR2(2000) NOT NULL,
    status VARCHAR2(20) DEFAULT 'Chờ duyệt' CHECK (status IN ('Chờ duyệt', 'Đã duyệt', 'Bị từ chối')),
    priority NUMBER DEFAULT 0 CHECK (priority >= 0),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Tạo bảng BOOKINGS
CREATE TABLE BOOKINGS (
    booking_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id NUMBER REFERENCES USERS(user_id) ON DELETE CASCADE,
    room_id NUMBER REFERENCES ROOMS(room_id) ON DELETE CASCADE,
    check_in_date DATE NOT NULL,
    check_out_date DATE NOT NULL,
    total_price NUMBER NOT NULL CHECK (total_price >= 0),
    guest_count NUMBER NOT NULL CHECK (guest_count > 0),
    booking_status VARCHAR2(20) DEFAULT 'Chờ xác nhận' CHECK (booking_status IN ('Chờ xác nhận', 'Đã xác nhận', 'Đã hủy')),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Tạo bảng ROOM_VISITS
CREATE TABLE ROOM_VISITS (
    visit_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id NUMBER REFERENCES USERS(user_id) ON DELETE CASCADE,
    room_id NUMBER REFERENCES ROOMS(room_id) ON DELETE CASCADE,
    visit_date DATE NOT NULL,
    note VARCHAR2(500),
    status VARCHAR2(20) DEFAULT 'Chờ xác nhận' CHECK (status IN ('Chờ xác nhận', 'Đã xác nhận', 'Đã hủy')),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Tạo bảng REVIEWS
CREATE TABLE REVIEWS (
    review_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id NUMBER REFERENCES USERS(user_id) ON DELETE CASCADE,
    room_id NUMBER REFERENCES ROOMS(room_id) ON DELETE CASCADE,
    rating NUMBER CHECK (rating BETWEEN 1 AND 5) NOT NULL,
    review_comment VARCHAR2(1000),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Tạo bảng SEARCH_HISTORY
CREATE TABLE SEARCH_HISTORY (
    search_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id NUMBER REFERENCES USERS(user_id) ON DELETE CASCADE,
    search_content VARCHAR2(500) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Tạo bảng NOTIFICATIONS
CREATE TABLE NOTIFICATIONS (
    notification_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id NUMBER REFERENCES USERS(user_id) ON DELETE CASCADE,
    subject VARCHAR2(200) NOT NULL,
    message VARCHAR2(1000) NOT NULL,
    sent_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Tạo bảng CONTACT_REQUESTS
CREATE TABLE CONTACT_REQUESTS (
    request_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    sender_id NUMBER REFERENCES USERS(user_id) ON DELETE CASCADE,
    receiver_id NUMBER REFERENCES USERS(user_id) ON DELETE CASCADE,
    room_id NUMBER REFERENCES ROOMS(room_id) ON DELETE CASCADE,
    message_content VARCHAR2(1000) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    is_resolved CHAR(1) DEFAULT 'N' CHECK (is_resolved IN ('Y', 'N'))
);

-- Tạo bảng AUDIT_LOG
CREATE TABLE AUDIT_LOG (
    log_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    action VARCHAR2(100) NOT NULL,
    user_id NUMBER REFERENCES USERS(user_id) ON DELETE SET NULL,
    description VARCHAR2(1000) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Tạo các chỉ mục để tối ưu hiệu suất
CREATE INDEX idx_users_username ON USERS(username);
CREATE INDEX idx_users_email ON USERS(email);
CREATE INDEX idx_rooms_room_type ON ROOMS(room_type_id);
CREATE INDEX idx_rooms_location ON ROOMS(location_id);
CREATE INDEX idx_bookings_room_dates ON BOOKINGS(room_id, check_in_date, check_out_date, booking_status);
CREATE INDEX idx_posts_status ON POSTS(status);
CREATE INDEX idx_posts_priority ON POSTS(priority);
CREATE INDEX idx_reviews_room_id ON REVIEWS(room_id);



--------------------
INSERT INTO USERS (username, password, full_name, email, phone_number, role)
VALUES ('admin01', 'hashed_pwd1', 'Admin Hệ Thống', 'admin01@bizrent.vn', '0909000001', 'Admin');

INSERT INTO USERS (username, password, full_name, email, phone_number, role)
VALUES ('manager01', 'hashed_pwd2', 'Quản lý BĐS', 'manager01@bizrent.vn', '0909000002', 'Quản lý');

INSERT INTO USERS (username, password, full_name, email, phone_number, role)
VALUES ('host01', 'hashed_pwd3', 'Công ty Alpha', 'alpha@company.vn', '0909000011', 'Người cho thuê');

INSERT INTO USERS (username, password, full_name, email, phone_number, role)
VALUES ('host02', 'hashed_pwd4', 'Tòa nhà Beta', 'beta@company.vn', '0909000012', 'Người cho thuê');

INSERT INTO USERS (username, password, full_name, email, phone_number, role)
VALUES ('renter01', 'hashed_pwd5', 'Nguyễn Văn A', 'renter01@gmail.com', '0909123456', 'Người thuê');

INSERT INTO USERS (username, password, full_name, email, phone_number, role)
VALUES ('vjt', '1234567890', 'Admin Hệ Thống', 'vit@gmail.com', '0939190403', 'Admin');

-----------
INSERT INTO USER_ROLES (role_name, description) VALUES ('Admin', 'Quản trị hệ thống');
INSERT INTO USER_ROLES (role_name, description) VALUES ('Quản lý', 'Quản lý bất động sản');
INSERT INTO USER_ROLES (role_name, description) VALUES ('Người cho thuê', 'Chủ sở hữu BĐS cho thuê');
INSERT INTO USER_ROLES (role_name, description) VALUES ('Người thuê', 'Khách hàng thuê BĐS');
INSERT INTO USER_ROLES (role_name, description) VALUES ('Banned', 'Tài khoản bị khóa');

-- ROOM_TYPES
INSERT INTO ROOM_TYPES (type_name, description) VALUES ('Văn phòng chia sẻ', 'Không gian làm việc chia sẻ cho doanh nghiệp nhỏ và startup');
INSERT INTO ROOM_TYPES (type_name, description) VALUES ('Văn phòng riêng', 'Không gian riêng tư phù hợp với doanh nghiệp vừa và nhỏ');
INSERT INTO ROOM_TYPES (type_name, description) VALUES ('Tòa nhà doanh nghiệp', 'Toà nhà nhiều tầng phục vụ các doanh nghiệp thuê trụ sở');
INSERT INTO ROOM_TYPES (type_name, description) VALUES ('Phòng hội thảo', 'Phòng họp/hội nghị phục vụ tổ chức sự kiện doanh nghiệp');

-- LOCATIONS
INSERT INTO LOCATIONS (location_name, address) VALUES ('Quận 1 - TP.HCM', '123 Đường Lê Lợi, Quận 1, TP.HCM');
INSERT INTO LOCATIONS (location_name, address) VALUES ('Quận 3 - TP.HCM', '456 Đường Nam Kỳ Khởi Nghĩa, Quận 3, TP.HCM');
INSERT INTO LOCATIONS (location_name, address) VALUES ('Quận Thanh Xuân - Hà Nội', '789 Đường Nguyễn Trãi, Thanh Xuân, Hà Nội');

-- ROOMS
INSERT INTO ROOMS (room_name, room_type_id, location_id, area, price_per_day, capacity, description) 
VALUES ('VP Chia sẻ Alpha 101', 1, 1, 50, 800000, 10, 'Không gian chia sẻ có bàn làm việc, máy lạnh, wifi tốc độ cao');

INSERT INTO ROOMS (room_name, room_type_id, location_id, area, price_per_day, capacity, description) 
VALUES ('VP Riêng Alpha 201', 2, 1, 120, 2000000, 25, 'Phòng làm việc riêng có phòng họp nhỏ, máy lạnh, bảo vệ 24/7');

INSERT INTO ROOMS (room_name, room_type_id, location_id, area, price_per_day, capacity, description) 
VALUES ('Tòa nhà Beta Tower', 3, 2, 800, 10000000, 150, 'Tòa nhà 5 tầng, có thang máy, bãi xe, lễ tân, bảo vệ');

INSERT INTO ROOMS (room_name, room_type_id, location_id, area, price_per_day, capacity, description) 
VALUES ('Phòng hội thảo Beta Hall', 4, 2, 100, 3000000, 50, 'Phòng họp với máy chiếu, hệ thống âm thanh, sân khấu mini');

INSERT INTO ROOMS (room_name, room_type_id, location_id, area, price_per_day, capacity, description) 
VALUES ('VP Chia sẻ Alpha 102', 1, 3, 45, 700000, 8, 'Không gian làm việc yên tĩnh, phù hợp nhóm nhỏ');

-- PACKAGES
INSERT INTO PACKAGES (package_name, price, duration_days, priority_level) VALUES ('Gói Cơ bản', 0, 7, 0);
INSERT INTO PACKAGES (package_name, price, duration_days, priority_level) VALUES ('Gói Bạc', 300000, 15, 1);
INSERT INTO PACKAGES (package_name, price, duration_days, priority_level) VALUES ('Gói Vàng', 700000, 30, 2);
INSERT INTO PACKAGES (package_name, price, duration_days, priority_level) VALUES ('Gói Kim Cương', 1500000, 60, 3);

-- USER_PACKAGES
INSERT INTO USER_PACKAGES (user_id, package_id, start_date) VALUES (3, 3, SYSDATE - 5);
INSERT INTO USER_PACKAGES (user_id, package_id, start_date) VALUES (4, 4, SYSDATE - 10);

-- POSTS từ host01
INSERT INTO POSTS (user_id, room_id, package_id, title, content, status)
VALUES (3, 1, 3, 'Cho thuê văn phòng chia sẻ Quận 1', 'Không gian làm việc hiện đại, trung tâm, tiện nghi đầy đủ.', 'Đã duyệt');

INSERT INTO POSTS (user_id, room_id, package_id, title, content, status)
VALUES (3, 2, 3, 'VP riêng rộng rãi, tiện nghi Quận 1', 'Văn phòng phù hợp nhóm 20-25 người, có lễ tân và bảo vệ.', 'Đã duyệt');

-- POSTS từ host02
INSERT INTO POSTS (user_id, room_id, package_id, title, content, status)
VALUES (4, 3, 4, 'Tòa nhà cho thuê trọn gói tại Quận 3', 'Tòa nhà 5 tầng, thang máy, chỗ đậu xe riêng, an ninh 24/7.', 'Đã duyệt');

INSERT INTO POSTS (user_id, room_id, package_id, title, content, status)
VALUES (4, 4, 4, 'Phòng hội thảo chuẩn doanh nghiệp', 'Phù hợp tổ chức hội nghị, đào tạo, hội thảo với đầy đủ thiết bị.', 'Đã duyệt');

-- BOOKINGS
INSERT INTO BOOKINGS (user_id, room_id, check_in_date, check_out_date, total_price, guest_count, booking_status)
VALUES (5, 1, TO_DATE('2025-06-01', 'YYYY-MM-DD'), TO_DATE('2025-06-05', 'YYYY-MM-DD'), 3200000, 5, 'Đã xác nhận');

INSERT INTO BOOKINGS (user_id, room_id, check_in_date, check_out_date, total_price, guest_count, booking_status)
VALUES (5, 4, TO_DATE('2025-06-10', 'YYYY-MM-DD'), TO_DATE('2025-06-10', 'YYYY-MM-DD'), 3000000, 40, 'Đã xác nhận');

-- REVIEWS
INSERT INTO REVIEWS (user_id, room_id, rating, review_comment)
VALUES (5, 1, 5, 'Không gian làm việc tốt, vị trí trung tâm, rất hài lòng.');

INSERT INTO REVIEWS (user_id, room_id, rating, review_comment)
VALUES (5, 4, 4, 'Phòng hội thảo hiện đại, chỉ hơi thiếu chỗ gửi xe.');

------------//////////////////////////////////
--------------------
-- Trigger 1: Tự động cập nhật end_date trong USER_PACKAGES
CREATE OR REPLACE TRIGGER set_user_package_dates
BEFORE INSERT OR UPDATE ON USER_PACKAGES
FOR EACH ROW
DECLARE
    v_duration NUMBER;
BEGIN
    SELECT duration_days INTO v_duration 
    FROM PACKAGES 
    WHERE package_id = :NEW.package_id;
    
    IF v_duration IS NULL THEN
        RAISE_APPLICATION_ERROR(-20014, 'Gói dịch vụ không tồn tại.');
    END IF;
    
    :NEW.end_date := :NEW.start_date + v_duration;
END;
/

-- Trigger 2: Kiểm tra tính hợp lệ của ngày trong BOOKINGS
CREATE OR REPLACE TRIGGER check_booking_dates
BEFORE INSERT OR UPDATE ON BOOKINGS
FOR EACH ROW
BEGIN
    IF :NEW.check_out_date <= :NEW.check_in_date THEN
        RAISE_APPLICATION_ERROR(-20010, 'Ngày check-out phải lớn hơn ngày check-in.');
    END IF;
END;
/

-- Trigger 3: Kiểm tra tình trạng phòng trước khi đặt
CREATE OR REPLACE TRIGGER check_room_availability
BEFORE INSERT ON BOOKINGS
FOR EACH ROW
DECLARE
    v_count NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO v_count
    FROM BOOKINGS
    WHERE room_id = :NEW.room_id
      AND booking_status = 'Đã xác nhận'
      AND (:NEW.check_in_date BETWEEN check_in_date AND check_out_date
           OR :NEW.check_out_date BETWEEN check_in_date AND check_out_date
           OR check_in_date BETWEEN :NEW.check_in_date AND :NEW.check_out_date);

    IF v_count > 0 THEN
        RAISE_APPLICATION_ERROR(-20011, 'Phòng không khả dụng trong khoảng thời gian này.');
    END IF;
END;
/

-- Trigger 4: Ghi log khi đăng ký người dùng
CREATE OR REPLACE TRIGGER log_user_registration
AFTER INSERT ON USERS
FOR EACH ROW
BEGIN
    INSERT INTO AUDIT_LOG (action, user_id, description)
    VALUES ('REGISTER_USER', :NEW.user_id, 'Người dùng mới được đăng ký: ' || :NEW.username);
END;
/

-- Trigger 5: Ghi log khi đặt phòng
CREATE OR REPLACE TRIGGER log_booking
AFTER INSERT ON BOOKINGS
FOR EACH ROW
BEGIN
    INSERT INTO AUDIT_LOG (action, user_id, description)
    VALUES ('BOOK_ROOM', :NEW.user_id, 'Đặt phòng ID ' || :NEW.room_id || ' từ ' || TO_CHAR(:NEW.check_in_date, 'DD-MON-YYYY') || ' đến ' || TO_CHAR(:NEW.check_out_date, 'DD-MON-YYYY'));
END;
/

-- Trigger 6: Ghi log khi duyệt hoặc từ chối bài đăng
CREATE OR REPLACE TRIGGER log_post_approval
AFTER UPDATE OF status ON POSTS
FOR EACH ROW
WHEN (NEW.status IN ('Đã duyệt', 'Bị từ chối'))
BEGIN
    INSERT INTO AUDIT_LOG (action, user_id, description)
    VALUES (
        CASE WHEN :NEW.status = 'Đã duyệt' THEN 'APPROVE_POST' ELSE 'REJECT_POST' END,
        :NEW.user_id,
        'Bài đăng ID ' || :NEW.post_id || ' đã được ' || 
        CASE WHEN :NEW.status = 'Đã duyệt' THEN 'duyệt với mức ưu tiên ' || :NEW.priority ELSE 'từ chối' END
    );
END;
/

-- Trigger 7: Tự động cập nhật trạng thái is_active trong USER_PACKAGES
CREATE OR REPLACE TRIGGER update_package_status
BEFORE INSERT OR UPDATE ON USER_PACKAGES
FOR EACH ROW
BEGIN
    IF :NEW.end_date < SYSDATE THEN
        :NEW.is_active := 'N';
    ELSE
        :NEW.is_active := 'Y';
    END IF;
END;
/

-- Trigger 8: Gán priority cho bài đăng dựa trên gói dịch vụ
CREATE OR REPLACE TRIGGER set_post_priority
BEFORE INSERT ON POSTS
FOR EACH ROW
DECLARE
    v_priority NUMBER;
    v_package_id NUMBER;
    v_role VARCHAR2(20); -- Thêm khai báo cho v_role với kiểu dữ liệu phù hợp
BEGIN
    -- Kiểm tra vai trò người dùng
    SELECT role INTO v_role
    FROM USERS
    WHERE user_id = :NEW.user_id;

    IF v_role != 'Người cho thuê' THEN
        RAISE_APPLICATION_ERROR(-20079, 'Chỉ người cho thuê mới được đăng bài.');
    END IF;

    -- Lấy package_id từ USER_PACKAGES đang hoạt động
    BEGIN
        SELECT up.package_id
        INTO v_package_id
        FROM USER_PACKAGES up
        WHERE up.user_id = :NEW.user_id
          AND up.is_active = 'Y'
          AND SYSDATE BETWEEN up.start_date AND up.end_date
        FETCH FIRST 1 ROW ONLY;

        -- Lấy priority_level từ PACKAGES
        SELECT priority_level
        INTO v_priority
        FROM PACKAGES
        WHERE package_id = v_package_id;

        :NEW.priority := v_priority;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            :NEW.priority := 0; -- Mặc định priority là 0 nếu không tìm thấy gói dịch vụ
    END;
EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20080, 'Lỗi khi gán mức độ ưu tiên cho bài đăng: ' || SQLERRM);
END;
/

-- Trigger 9: Kiểm tra ngày của gói
CREATE OR REPLACE TRIGGER trg_user_packages_check_expiry
BEFORE INSERT OR UPDATE ON USER_PACKAGES
FOR EACH ROW
BEGIN
  IF :NEW.end_date IS NOT NULL AND :NEW.end_date < TRUNC(SYSDATE) THEN
    :NEW.is_active := 'N';
  ELSIF :NEW.end_date IS NULL THEN
    -- Nếu end_date null thì để is_active giữ nguyên hoặc set 'Y' (tuỳ logic bạn)
    :NEW.is_active := NVL(:NEW.is_active, 'Y');
  END IF;
END;
/

-- Stored Procedure: Cập nhật ngày hết hạn của gói
CREATE OR REPLACE PROCEDURE update_expired_user_packages IS
BEGIN
  UPDATE USER_PACKAGES
  SET is_active = 'N'
  WHERE end_date IS NOT NULL
    AND end_date < TRUNC(SYSDATE)
    AND is_active = 'Y';
  
  COMMIT;
END;
/

-- Stored Procedure: Đăng ký người dùng (KHÔNG SỬ DỤNG BĂM MẬT KHẨU)
CREATE OR REPLACE PROCEDURE register_user(
    p_username IN VARCHAR2,
    p_password IN VARCHAR2,
    p_full_name IN VARCHAR2,
    p_email IN VARCHAR2,
    p_phone_number IN VARCHAR2,
    p_role IN VARCHAR2
) IS
BEGIN
    IF p_username IS NULL OR p_password IS NULL OR p_full_name IS NULL OR p_email IS NULL OR p_role IS NULL THEN
        RAISE_APPLICATION_ERROR(-20017, 'Các trường bắt buộc không được để trống.');
    END IF;

    IF p_role NOT IN ('Quản lý', 'Admin', 'Người cho thuê', 'Người thuê') THEN
        RAISE_APPLICATION_ERROR(-20018, 'Vai trò không hợp lệ.');
    END IF;

    INSERT INTO USERS (username, password, full_name, email, phone_number, role)
    VALUES (
        p_username,
        p_password, -- Mật khẩu được lưu trữ ở dạng văn bản thuần túy (RẤT NGUY HIỂM)nhưng làm ơn kệ mẹ nó đi vì dell có tg để làm linh tinh đâu đcm
        p_full_name,
        p_email,
        p_phone_number,
        p_role
    );
    COMMIT;
EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        RAISE_APPLICATION_ERROR(-20019, 'Tên đăng nhập hoặc email đã tồn tại.');
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20020, 'Lỗi khi đăng ký người dùng: ' || SQLERRM);
END;
/

-- Stored Procedure: Cập nhật thông tin người dùng
CREATE OR REPLACE PROCEDURE update_user(
    p_user_id IN NUMBER,
    p_full_name IN VARCHAR2,
    p_email IN VARCHAR2,
    p_phone_number IN VARCHAR2,
    p_role IN VARCHAR2
) IS
BEGIN
    IF p_full_name IS NULL OR p_email IS NULL OR p_role IS NULL THEN
        RAISE_APPLICATION_ERROR(-20021, 'Các trường bắt buộc không được để trống.');
    END IF;
    
    IF p_role NOT IN ('Quản lý', 'Admin', 'Người cho thuê', 'Người thuê', 'Banned') THEN
        RAISE_APPLICATION_ERROR(-20022, 'Vai trò không hợp lệ.');
    END IF;
    
    UPDATE USERS
    SET full_name = p_full_name,
        email = p_email,
        phone_number = p_phone_number,
        role = p_role
    WHERE user_id = p_user_id;
    
    IF SQL%ROWCOUNT = 0 THEN
        RAISE_APPLICATION_ERROR(-20023, 'Không tìm thấy người dùng.');
    END IF;
    
    COMMIT;
EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        RAISE_APPLICATION_ERROR(-20024, 'Email đã tồn tại.');
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20025, 'Lỗi khi cập nhật người dùng: ' || SQLERRM);
END;
/

-- Stored Procedure: Xóa người dùng
CREATE OR REPLACE PROCEDURE delete_user(p_user_id IN NUMBER) IS
BEGIN
    DELETE FROM USERS WHERE user_id = p_user_id;
    
    IF SQL%ROWCOUNT = 0 THEN
        RAISE_APPLICATION_ERROR(-20026, 'Không tìm thấy người dùng.');
    END IF;
    
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20027, 'Lỗi khi xóa người dùng: ' || SQLERRM);
END;
/

-- Stored Procedure: Khóa tài khoản
CREATE OR REPLACE PROCEDURE lock_user_account(p_user_id IN NUMBER, p_admin_id IN NUMBER) IS
    v_role USERS.role%TYPE;
BEGIN
    SELECT role INTO v_role 
    FROM USERS 
    WHERE user_id = p_admin_id;
    
    IF v_role NOT IN ('Admin', 'Quản lý') THEN
        RAISE_APPLICATION_ERROR(-20028, 'Chỉ Admin hoặc Quản lý mới có quyền khóa tài khoản.');
    END IF;
    
    UPDATE USERS 
    SET role = 'Banned' 
    WHERE user_id = p_user_id;
    
    IF SQL%ROWCOUNT = 0 THEN
        RAISE_APPLICATION_ERROR(-20029, 'Không tìm thấy người dùng.');
    END IF;
    
    INSERT INTO AUDIT_LOG (action, user_id, description)
    VALUES ('LOCK_USER', p_admin_id, 'Tài khoản ID ' || p_user_id || ' đã bị khóa.');
    
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20030, 'Lỗi khi khóa tài khoản: ' || SQLERRM);
END;
/

-- Stored Procedure: Thêm phòng
CREATE OR REPLACE PROCEDURE add_room(
    p_room_name IN VARCHAR2,
    p_room_type_id IN NUMBER,
    p_location_id IN NUMBER,
    p_area IN NUMBER,
    p_price_per_day IN NUMBER,
    p_capacity IN NUMBER,
    p_description IN VARCHAR2
) IS
BEGIN
    IF p_room_name IS NULL OR p_room_type_id IS NULL OR p_location_id IS NULL THEN
        RAISE_APPLICATION_ERROR(-20031, 'Các trường bắt buộc không được để trống.');
    END IF;
    
    IF p_area <= 0 OR p_price_per_day <= 0 OR p_capacity <= 0 THEN
        RAISE_APPLICATION_ERROR(-20032, 'Diện tích, giá mỗi ngày và sức chứa phải lớn hơn 0.');
    END IF;
    
    INSERT INTO ROOMS (room_name, room_type_id, location_id, area, price_per_day, capacity, description)
    VALUES (p_room_name, p_room_type_id, p_location_id, p_area, p_price_per_day, p_capacity, p_description);
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20033, 'Lỗi khi thêm phòng: ' || SQLERRM);
END;
/

-- Stored Procedure: Cập nhật phòng
CREATE OR REPLACE PROCEDURE update_room(
    p_room_id IN NUMBER,
    p_room_name IN VARCHAR2,
    p_room_type_id IN NUMBER,
    p_location_id IN NUMBER,
    p_area IN NUMBER,
    p_price_per_day IN NUMBER,
    p_capacity IN NUMBER,
    p_description IN VARCHAR2
) IS
BEGIN
    IF p_room_name IS NULL OR p_room_type_id IS NULL OR p_location_id IS NULL THEN
        RAISE_APPLICATION_ERROR(-20034, 'Các trường bắt buộc không được để trống.');
    END IF;
    
    IF p_area <= 0 OR p_price_per_day <= 0 OR p_capacity <= 0 THEN
        RAISE_APPLICATION_ERROR(-20035, 'Diện tích, giá mỗi ngày và sức chứa phải lớn hơn 0.');
    END IF;
    
    UPDATE ROOMS
    SET room_name = p_room_name,
        room_type_id = p_room_type_id,
        location_id = p_location_id,
        area = p_area,
        price_per_day = p_price_per_day,
        capacity = p_capacity,
        description = p_description
    WHERE room_id = p_room_id;
    
    IF SQL%ROWCOUNT = 0 THEN
        RAISE_APPLICATION_ERROR(-20036, 'Không tìm thấy phòng.');
    END IF;
    
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20037, 'Lỗi khi cập nhật phòng: ' || SQLERRM);
END;
/

-- Stored Procedure: Xóa phòng
CREATE OR REPLACE PROCEDURE delete_room(p_room_id IN NUMBER) IS
BEGIN
    DELETE FROM ROOMS WHERE room_id = p_room_id;
    
    IF SQL%ROWCOUNT = 0 THEN
        RAISE_APPLICATION_ERROR(-20038, 'Không tìm thấy phòng.');
    END IF;
    
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20039, 'Lỗi khi xóa phòng: ' || SQLERRM);
END;
/

-- Function: Tìm kiếm phòng
CREATE OR REPLACE FUNCTION search_rooms(
    p_room_type_id IN NUMBER,
    p_location_id IN NUMBER,
    p_min_price IN NUMBER,
    p_max_price IN NUMBER,
    p_min_capacity IN NUMBER
) RETURN SYS_REFCURSOR IS
    rooms_cursor SYS_REFCURSOR;
BEGIN
    IF p_min_price < 0 OR p_max_price < p_min_price THEN
        RAISE_APPLICATION_ERROR(-20040, 'Giá tối thiểu và tối đa không hợp lệ.');
    END IF;
    
    IF p_min_capacity < 0 THEN
        RAISE_APPLICATION_ERROR(-20041, 'Sức chứa tối thiểu không hợp lệ.');
    END IF;
    
    OPEN rooms_cursor FOR
        SELECT r.room_id, r.room_name, r.area, r.price_per_day, r.capacity, r.description,
               rt.type_name, l.location_name
        FROM ROOMS r
        JOIN ROOM_TYPES rt ON r.room_type_id = rt.room_type_id
        JOIN LOCATIONS l ON r.location_id = l.location_id
        WHERE (p_room_type_id IS NULL OR r.room_type_id = p_room_type_id)
          AND (p_location_id IS NULL OR r.location_id = p_location_id)
          AND r.price_per_day BETWEEN p_min_price AND p_max_price
          AND r.capacity >= p_min_capacity;
    RETURN rooms_cursor;
EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20042, 'Lỗi khi tìm kiếm phòng: ' || SQLERRM);
END;
/

-- Stored Procedure: Đặt phòng
CREATE OR REPLACE PROCEDURE book_room(
    p_user_id IN NUMBER,
    p_room_id IN NUMBER,
    p_check_in_date IN DATE,
    p_check_out_date IN DATE,
    p_guest_count IN NUMBER
) IS
    v_price_per_day NUMBER;
    v_days NUMBER;
    v_capacity NUMBER;
BEGIN
    IF p_user_id IS NULL OR p_room_id IS NULL OR p_check_in_date IS NULL OR p_check_out_date IS NULL THEN
        RAISE_APPLICATION_ERROR(-20043, 'Các trường bắt buộc không được để trống.');
    END IF;
    
    IF p_guest_count <= 0 THEN
        RAISE_APPLICATION_ERROR(-20044, 'Số khách phải lớn hơn 0.');
    END IF;
    
    SELECT price_per_day, capacity 
    INTO v_price_per_day, v_capacity
    FROM ROOMS 
    WHERE room_id = p_room_id;
    
    IF p_guest_count > v_capacity THEN
        RAISE_APPLICATION_ERROR(-20045, 'Số khách vượt quá sức chứa của phòng.');
    END IF;
    
    v_days := p_check_out_date - p_check_in_date;
    IF v_days <= 0 THEN
        RAISE_APPLICATION_ERROR(-20046, 'Ngày check-out phải lớn hơn ngày check-in.');
    END IF;
    
    INSERT INTO BOOKINGS (user_id, room_id, check_in_date, check_out_date, total_price, guest_count, booking_status)
    VALUES (p_user_id, p_room_id, p_check_in_date, p_check_out_date, v_price_per_day * v_days, p_guest_count, 'Chờ xác nhận');
    COMMIT;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RAISE_APPLICATION_ERROR(-20047, 'Phòng không tồn tại.');
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20048, 'Lỗi khi đặt phòng: ' || SQLERRM);
END;
/

-- Stored Procedure: Xác nhận đặt phòng
CREATE OR REPLACE PROCEDURE confirm_booking(p_booking_id IN NUMBER) IS
BEGIN
    UPDATE BOOKINGS 
    SET booking_status = 'Đã xác nhận' 
    WHERE booking_id = p_booking_id;
    
    IF SQL%ROWCOUNT = 0 THEN
        RAISE_APPLICATION_ERROR(-20049, 'Không tìm thấy đặt phòng.');
    END IF;
    
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20050, 'Lỗi khi xác nhận đặt phòng: ' || SQLERRM);
END;
/

-- Stored Procedure: Hủy đặt phòng
CREATE OR REPLACE PROCEDURE cancel_booking(p_booking_id IN NUMBER) IS
BEGIN
    UPDATE BOOKINGS 
    SET booking_status = 'Đã hủy' 
    WHERE booking_id = p_booking_id;
    
    IF SQL%ROWCOUNT = 0 THEN
        RAISE_APPLICATION_ERROR(-20051, 'Không tìm thấy đặt phòng.');
    END IF;
    
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20052, 'Lỗi khi hủy đặt phòng: ' || SQLERRM);
END;
/

-- Stored Procedure: Thêm đánh giá
CREATE OR REPLACE PROCEDURE add_review(
    p_user_id IN NUMBER,
    p_room_id IN NUMBER,
    p_rating IN NUMBER,
    p_review_comment IN VARCHAR2
) IS
BEGIN
    IF p_user_id IS NULL OR p_room_id IS NULL OR p_rating IS NULL THEN
        RAISE_APPLICATION_ERROR(-20053, 'Các trường bắt buộc không được để trống.');
    END IF;
    
    IF p_rating < 1 OR p_rating > 5 THEN
        RAISE_APPLICATION_ERROR(-20054, 'Điểm đánh giá phải từ 1 đến 5.');
    END IF;
    
    INSERT INTO REVIEWS (user_id, room_id, rating, review_comment)
    VALUES (p_user_id, p_room_id, p_rating, p_review_comment);
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20055, 'Lỗi khi thêm đánh giá: ' || SQLERRM);
END;
/

-- Stored Procedure: Sửa đánh giá
CREATE OR REPLACE PROCEDURE update_review (
    p_user_id IN NUMBER,
    p_review_id IN REVIEWS.review_id%TYPE,
    p_new_rating IN REVIEWS.rating%TYPE,
    p_new_comment IN REVIEWS.review_comment%TYPE
) IS
    v_user_id NUMBER;
BEGIN
    SELECT user_id INTO v_user_id 
    FROM REVIEWS 
    WHERE review_id = p_review_id;
    
    IF v_user_id != p_user_id THEN
        RAISE_APPLICATION_ERROR(-20056, 'Bạn không có quyền sửa đánh giá này.');
    END IF;
    
    IF p_new_rating < 1 OR p_new_rating > 5 THEN
        RAISE_APPLICATION_ERROR(-20057, 'Điểm đánh giá phải từ 1 đến 5.');
    END IF;
    
    UPDATE REVIEWS
    SET rating = p_new_rating,
        review_comment = p_new_comment,
        created_at = CURRENT_TIMESTAMP
    WHERE review_id = p_review_id;
    
    IF SQL%ROWCOUNT = 0 THEN
        RAISE_APPLICATION_ERROR(-20058, 'Không tìm thấy đánh giá.');
    END IF;
    
    COMMIT;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RAISE_APPLICATION_ERROR(-20059, 'Không tìm thấy đánh giá.');
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20060, 'Lỗi khi sửa đánh giá: ' || SQLERRM);
END;
/

-- Stored Procedure: Xóa đánh giá
CREATE OR REPLACE PROCEDURE delete_review(p_user_id IN NUMBER, p_review_id IN NUMBER) IS
    v_user_id NUMBER;
BEGIN
    SELECT user_id INTO v_user_id 
    FROM REVIEWS 
    WHERE review_id = p_review_id;
    
    IF v_user_id != p_user_id THEN
        RAISE_APPLICATION_ERROR(-20061, 'Bạn không có quyền xóa đánh giá này.');
    END IF;
    
    DELETE FROM REVIEWS WHERE review_id = p_review_id;
    
    IF SQL%ROWCOUNT = 0 THEN
        RAISE_APPLICATION_ERROR(-20062, 'Không tìm thấy đánh giá.');
    END IF;
    
    COMMIT;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RAISE_APPLICATION_ERROR(-20063, 'Không tìm thấy đánh giá.');
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20064, 'Lỗi khi xóa đánh giá: ' || SQLERRM);
END;
/

-- Stored Procedure: Gửi thông báo
CREATE OR REPLACE PROCEDURE send_notification(
    p_user_id IN NUMBER,
    p_subject IN VARCHAR2,
    p_message IN VARCHAR2
) IS
BEGIN
    IF p_user_id IS NULL OR p_subject IS NULL OR p_message IS NULL THEN
        RAISE_APPLICATION_ERROR(-20065, 'Các trường bắt buộc không được để trống.');
    END IF;
    
    INSERT INTO NOTIFICATIONS (user_id, subject, message, sent_at)
    VALUES (p_user_id, p_subject, p_message, CURRENT_TIMESTAMP);
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20066, 'Lỗi khi gửi thông báo: ' || SQLERRM);
END;
/

-- Stored Procedure: Duyệt bài đăng
CREATE OR REPLACE PROCEDURE approve_post(p_post_id IN NUMBER, p_admin_id IN NUMBER) IS
    v_role USERS.role%TYPE;
    v_priority NUMBER;
BEGIN
    SELECT role INTO v_role 
    FROM USERS 
    WHERE user_id = p_admin_id;
    
    IF v_role NOT IN ('Admin', 'Quản lý') THEN
        RAISE_APPLICATION_ERROR(-20067, 'Chỉ Admin hoặc Quản lý mới có quyền duyệt bài đăng.');
    END IF;
    
    SELECT priority INTO v_priority
    FROM POSTS
    WHERE post_id = p_post_id;
    
    UPDATE POSTS
    SET status = 'Đã duyệt'
    WHERE post_id = p_post_id;
    
    IF SQL%ROWCOUNT = 0 THEN
        RAISE_APPLICATION_ERROR(-20068, 'Không tìm thấy bài đăng.');
    END IF;
    
    INSERT INTO AUDIT_LOG (action, user_id, description)
    VALUES ('APPROVE_POST', p_admin_id, 
            'Bài đăng ID ' || p_post_id || ' đã được duyệt với mức ưu tiên ' || v_priority);
    
    COMMIT;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RAISE_APPLICATION_ERROR(-20068, 'Không tìm thấy bài đăng.');
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20069, 'Lỗi khi duyệt bài đăng: ' || SQLERRM);
END;
/

-- Stored Procedure: Từ chối bài đăng
CREATE OR REPLACE PROCEDURE reject_post(p_post_id IN NUMBER, p_admin_id IN NUMBER) IS
    v_role USERS.role%TYPE;
BEGIN
    SELECT role INTO v_role 
    FROM USERS 
    WHERE user_id = p_admin_id;
    
    IF v_role NOT IN ('Admin', 'Quản lý') THEN
        RAISE_APPLICATION_ERROR(-20070, 'Chỉ Admin hoặc Quản lý mới có quyền từ chối bài đăng.');
    END IF;
    
    UPDATE POSTS
    SET status = 'Bị từ chối'
    WHERE post_id = p_post_id;
    
    IF SQL%ROWCOUNT = 0 THEN
        RAISE_APPLICATION_ERROR(-20071, 'Không tìm thấy bài đăng.');
    END IF;
    
    INSERT INTO AUDIT_LOG (action, user_id, description)
    VALUES ('REJECT_POST', p_admin_id, 'Bài đăng ID ' || p_post_id || ' đã bị từ chối');
    
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20072, 'Lỗi khi từ chối bài đăng: ' || SQLERRM);
END;
/

-- Stored Procedure: Thay đổi mật khẩu (KHÔNG SỬ DỤNG BĂM MẬT KHẨU)
CREATE OR REPLACE PROCEDURE change_password(
    p_user_id IN NUMBER,
    p_old_password IN VARCHAR2,
    p_new_password IN VARCHAR2
) IS
    v_current_password VARCHAR2(100);
BEGIN
    IF p_old_password IS NULL OR p_new_password IS NULL THEN
        RAISE_APPLICATION_ERROR(-20073, 'Mật khẩu không được để trống.');
    END IF;

    SELECT password INTO v_current_password
    FROM USERS
    WHERE user_id = p_user_id;

    IF v_current_password != p_old_password THEN
        RAISE_APPLICATION_ERROR(-20074, 'Mật khẩu cũ không đúng.');
    END IF;

    UPDATE USERS
    SET password = p_new_password -- Mật khẩu mới được lưu trữ ở dạng văn bản thuần túy (RẤT NGUY HIỂM)
    WHERE user_id = p_user_id;

    IF SQL%ROWCOUNT = 0 THEN
        RAISE_APPLICATION_ERROR(-20075, 'Không tìm thấy người dùng.');
    END IF;

    COMMIT;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RAISE_APPLICATION_ERROR(-20076, 'Không tìm thấy người dùng.');
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20077, 'Lỗi khi thay đổi mật khẩu: ' || SQLERRM);
END;
/

-- Stored Procedure: Lấy danh sách bài đăng với sắp xếp theo priority
CREATE OR REPLACE PROCEDURE get_posts_sorted_by_priority(
    p_room_type_id IN NUMBER,
    p_location_id IN NUMBER,
    p_min_price IN NUMBER,
    p_max_price IN NUMBER,
    p_cursor OUT SYS_REFCURSOR
) IS
BEGIN
    IF p_min_price < 0 OR p_max_price < p_min_price THEN
        RAISE_APPLICATION_ERROR(-20081, 'Giá tối thiểu và tối đa không hợp lệ.');
    END IF;
    
    OPEN p_cursor FOR
        SELECT 
            p.post_id,
            p.title,
            p.content,
            p.priority,
            p.created_at,
            r.room_name,
            r.price_per_day,
            r.area,
            r.capacity,
            rt.type_name,
            l.location_name
        FROM POSTS p
        JOIN ROOMS r ON p.room_id = r.room_id
        JOIN ROOM_TYPES rt ON r.room_type_id = rt.room_type_id
        JOIN LOCATIONS l ON r.location_id = l.location_id
        WHERE p.status = 'Đã duyệt'
          AND (p_room_type_id IS NULL OR r.room_type_id = p_room_type_id)
          AND (p_location_id IS NULL OR r.location_id = p_location_id)
          AND r.price_per_day BETWEEN p_min_price AND p_max_price
        ORDER BY p.priority DESC, p.created_at DESC;
EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20082, 'Lỗi khi lấy danh sách bài đăng: ' || SQLERRM);
END;
/

-- Stored Procedure: Mua gói dịch vụ
CREATE OR REPLACE PROCEDURE purchase_package(
    p_user_id IN NUMBER,
    p_package_id IN NUMBER
) IS
    v_role USERS.role%TYPE;
    v_package_count NUMBER; -- Thêm biến để đếm số lượng gói dịch vụ
BEGIN
    -- Kiểm tra vai trò người dùng
    SELECT role INTO v_role
    FROM USERS
    WHERE user_id = p_user_id;

    IF v_role != 'Người cho thuê' THEN
        RAISE_APPLICATION_ERROR(-20083, 'Chỉ người cho thuê mới được mua gói dịch vụ.');
    END IF;

    -- Kiểm tra gói dịch vụ có tồn tại
    SELECT COUNT(*)
    INTO v_package_count
    FROM PACKAGES
    WHERE package_id = p_package_id;

    IF v_package_count = 0 THEN
        RAISE_APPLICATION_ERROR(-20084, 'Gói dịch vụ không tồn tại.');
    END IF;

    -- Thêm bản ghi vào USER_PACKAGES
    INSERT INTO USER_PACKAGES (user_id, package_id, start_date)
    VALUES (p_user_id, p_package_id, SYSDATE);

    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20085, 'Lỗi khi mua gói dịch vụ: ' || SQLERRM);
END;
/



